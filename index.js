const fs = require('fs');
const path = require('path');
const { Client, GatewayIntentBits } = require('discord.js');
const { config } = require('dotenv');
const { log } = require('./logger');

// === ENVIRONNEMENT ===
log('üîß Chargement des variables d\'environnement...');
config();

log('‚úÖ process.env.DISCORD_TOKEN:', process.env.DISCORD_TOKEN ? '[OK]' : '[MISSING ‚ùå]');

// === CLIENT DISCORD ===
log('ü§ñ Initialisation du client Discord...');
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});
log('‚úÖ Client Discord initialis√©.');

// === CHARGEMENT DES COMMANDES ===
log('üì¶ Chargement des fonctions de commande...');
const commandes = require('./commandes.js');
log('üì¶ Fonctions import√©es depuis commandes.js :', Object.keys(commandes));

// === CHARGEMENT DU JSON ===
log('üìÑ Lecture du fichier commandes.json...');
const commandesFilePath = path.resolve('commandes.json');
log('üóÇÔ∏è Chemin absolu du JSON:', commandesFilePath);

const commandesData = JSON.parse(fs.readFileSync(commandesFilePath, 'utf-8'));
log('‚úÖ Donn√©es lues dans commandes.json:', commandesData);

// === MAPPING COMMANDES ===
client.commands = new Map();
log('üîÅ Association des commandes:');

commandesData.forEach(({ name }) => {
  log(`‚û°Ô∏è V√©rification de la commande: "${name}"`);
  if (commandes[name]) {
    client.commands.set(name, commandes[name]);
    log(`‚úÖ "${name}" li√©e √† sa fonction.`);
  } else {
    console.warn(`‚ö†Ô∏è Fonction "${name}" introuvable dans commandes.js`);
  }
});

log('‚úÖ Toutes les commandes sont mapp√©es.');

// === EVENT : BOT PR√äT ===
client.once('ready', () => {
  log(`üü¢ Bot connect√© en tant que ${client.user.tag}`);
});

// === EVENT : MESSAGE CREATE ===
client.on('messageCreate', (message) => {
  log('üì© Nouveau message re√ßu !');
  log('   üßë Auteur :', message.author.username);
  log('   üßæ Contenu :', message.content);
  log('   üîç Est-ce un bot ?', message.author.bot);

  if (message.author.bot) {
    log('‚è© Ignor√© (message d\'un bot)');
    return;
  }

  const prefix = '!';
  if (message.content.toLowerCase().startsWith(prefix)) {
    log('üìå Message commence par le pr√©fixe !');

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    log(`üì• Commande d√©tect√©e: "${commandName}"`);
    log('üì¶ Arguments:', args);

    if (client.commands.has(commandName)) {
      log(`üöÄ Ex√©cution de la commande "${commandName}"`);
      try {
        client.commands.get(commandName)(message, args);
        log(`‚úÖ Commande "${commandName}" ex√©cut√©e sans erreur.`);
      } catch (error) {
        console.error(`‚ùå Erreur pendant l'ex√©cution de "${commandName}":`, error);
        message.reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
      }
    } else {
      console.warn(`‚ùì Commande "${commandName}" non trouv√©e dans la map.`);
    }
  }

  // === COMMANDE HELP ===
  if (message.content.toLowerCase() === `${prefix}help`) {
    log('üìö Commande !help d√©tect√©e, g√©n√©ration de la liste...');
    const helpMessage = ['**Liste des commandes disponibles :**'];
    commandesData.forEach(({ name, description }) => {
      helpMessage.push(`**${prefix}${name}**: ${description}`);
    });
    message.channel.send(helpMessage.join('\n'));
    log('‚úÖ Message d\'aide envoy√©.');
  }
});

// === LOGIN DU BOT ===
log('üîë Connexion du bot...');
client.login(process.env.DISCORD_TOKEN)
  .then(() => {
    log('üîì Connexion r√©ussie !');
  })
  .catch((err) => {
    console.error('‚ùå √âchec de la connexion au bot :', err);
  });
